#include        <stdio.h>
#include        <stdlib.h>
#include        <fcntl.h>
#include        <string.h>
#include        <time.h>
#include        <sys/types.h>
#include        <sys/mman.h>
#include        <math.h>
#include        <time.h>

#define SEC2NANOSEC 1000000000
#define DIM     128
#define TYPE    float
//###################################################################################
// Assumptions before you run this code
//###################################################################################
// - DMA is included in block design and bitstream is built with it
// - Linux Kernel has UIO drivers enabled
// - Kernel bootargs have been appended with: "uio_pdrv_genirq.of_id=generic-uio"
// - Appropriate changes have been made in the device tree
// - insmod udmabuf.ko udmabuf0=1048576

static char   attr[1024];

int           dma_control_fd;
unsigned int *dma_control_base_addr;

int           fd_udmabuf;
unsigned long udmabuf_phys_addr;

// Include File Containing DMA and udmabuf Initialization Routines
#include      "dma.h"

// Include File Containing Matrix Generation/Multiplication/Transfer Routines
#include      "fft.h"

//###################################################################################
// Main Function
//###################################################################################
int main() {
  
    int          fd_mm2s_buffer;
    int          fd_s2mm_buffer;
    unsigned int *mm2s_buffer_base_addr;
    unsigned int *s2mm_buffer_base_addr;

    TYPE         *udmabuf_base_addr;

    printf("\n");

    // Virtual Address to DMA Control Slave
    init_dma();

    // Virtual Address to udmabuf Buffer
    udmabuf_base_addr = init_udmabuf(fd_udmabuf);

    // Defining Address Spaces of Source/Destination Buffers for DMA Transfers
    TYPE *fft_input  = &udmabuf_base_addr[0];
    TYPE *fft_output = &udmabuf_base_addr[DIM * 2];

    TYPE *fft_input_ref  = malloc(DIM * 2 * sizeof(TYPE));
    TYPE *fft_output_ref = malloc(DIM * 2 * sizeof(TYPE));

    // Generate FFT Inputs and Write it to DMA Source Buffer
    gen_input_fft(fft_input, fft_input_ref);

    // Reference Result for FFT
    gen_ref_result(fft_output_ref);
   
    struct timespec start1, end1;
    float exec_time;

    clock_gettime(CLOCK_MONOTONIC, &start1);
    // Setup RX over DMA
    setup_rx();
    
    // Transfer Matrix A over the DMA
    setup_tx();

    // Wait for DMA to complete transfer to destination buffer
    dma_wait_for_rx_complete();
    clock_gettime(CLOCK_MONOTONIC, &end1);

    // Compare result returned from hardware and software golden reference
    check_result(fft_output_ref, fft_output);

    exec_time = ((double)end1.tv_sec*SEC2NANOSEC + (double)end1.tv_nsec)
        	                  - ((double)start1.tv_sec*SEC2NANOSEC + (double)start1.tv_nsec);
    printf("[ INFO] FFT execution time (ns): %f\n", exec_time);
    printf("Life is unfair", exec_time);
  
	//###################################################################################
	// Destroying file descriptors and virtual address maps
	//###################################################################################
    close_dma();

    return 0;
}
    
    


