@startuml

:Read in received data;
:Build weighting vector to taper synchronization adaptive FIR filter;

repeat
    :Grab received data [i,...,number of sync training samples];
    :Stack time shifted versions of the data into a space-time data matrix;
    :Create autocorrelation matrix (hermitian transpose and matrix multiplication);
    :Invert autocorrelation matrix (LU decomposition and inversion);
    :Create array response vector (hermitian transpose and matrix multiplication);
    :Build the adaptive FIR filter (matrix multiplication);
    :Taper the adaptive FIR filter (element-wise matrix multiplication);
    :Compute the estimate of the transmitted synchronization training sequence (hermitian transpose and matrix multiplication);
    :Compute the norm of the estimate (FIR);
    :Check if norm is above chosen threshold;
    :i=i+1;
repeat while (norm < threshold?) is (yes)
->no;

:Grab comms signal training data;
:Stack time shifted versions of the data into a space-time data matrix;
:Create autocorrelation matrix (hermitian transpose and matrix multiplication);
:Invert autocorrelation matrix (LU decomposition and inversion);
:Create array response vector (hermitian transpose and matrix multiplication);
:Build the adaptive FIR filter (matrix multiplication);
:Grab comms signal data (unknown transmitted message);
:Stack time shifted versions of the data into a space-time data matrix;
:Use adaptive FIR filter to compute the estimate of the transmitted comms data sequence (hermitian transpose and matrix multiplication);

repeat
    :Determine nearest QPSK constellation point to the i^th data estimate;
repeat while (i<numData?) is (yes)
->no;

repeat
    :Grab i_th 64 sample section of remodulated comms signal and the received data signal;
    :Stack time shifted versions of the remodulated comms signal into a data matrix;
    :Compute auto-correlation matrix (hermitian transpose and matrix multiplication);
    :Invert auto-correlation matrix (LU decomposition and inversion);
    :Build projection matrix (2 matrix multiplications);
    :Project relevant received data onto comms signal subspace (matrix multiplication);
    :Compute projection of received data onto subspace orthogonal to comms signal subspace (matrix subtraction);
repeat while (i<num relevant sections?) is (yes)
->no;

:Use received data with comms signal temporally projected out to perform required radar processing...;



@enduml
